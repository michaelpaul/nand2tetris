class Block
{
    field int width, height;
    field boolean origin;
    // posição na matriz
    field int row, col;

    constructor Block new()
    {
        var int size;
        let size = Block.getSize();
        let width = size;
        let height = size;
        let origin = false;
        return this;
    }

    function int getSize()
    {
        return 15;
    }

    function int getMargin()
    {
        return 2;
    }

    method void setOrigin()
    {
        let origin = true;
        return;
    }

    method void setBoardPos(int prow, int pcol)
    {
        let row = prow;
        let col = pcol;
        return;
    }

    method int getRow()
    {
        return row;
    }

    method int getCol()
    {
        return col;
    }

    method int getRowDir(int direction)
    {
        // 1 = up, col, row - 1
        // 2 = down, col, row + 1
        if (direction = 1) {
            return row + 1;
        }
        if (direction = 2) {
            return row - 1;
        }
        return row;
    }

    method int getColDir(int direction)
    {
        // 3 = left, col - 1, row
        // 4 = right, col + 1, row
        if (direction = 3) {
            return col - 1;
        }
        if (direction = 4) {
            return col + 1;
        }
        return col;
    }

    method void move(int direction)
    {
        var int row, col;
        let row = getRowDir(direction);
        let col = getColDir(direction);
        do setBoardPos(row, col);
        return;
    }
    // Board origin: int bx, int by
    method void draw(int bx, int by)
    {
        var int x, y;
        let x = bx + Block.getMargin() + (col * width);
        let y = by - (row * height) - height;
        do Screen.drawRectangle(x, y, x + width - Block.getMargin(), y + height - Block.getMargin());
        // riscar origin, debug...
        //if (origin) {
        //    do Screen.setColor(false);
        //    do Screen.drawLine(x, y, x + width - Block.getMargin(), y + height - Block.getMargin());
        //    do Screen.setColor(true);
        //}
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }
}
