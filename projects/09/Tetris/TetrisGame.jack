class TetrisGame
{
    field boolean game_over;
    // tabuleiro
    field Board mesa;
    // próxima peça
    field Piece next;
    field int last_piece;
    static int seed;

    constructor TetrisGame new()
    {
        let mesa = Board.new(18, 10);
        let game_over = false;
        let last_piece = 1;
        return this;
    }

    function void seed(int s)
    {
        let seed = seed + s;
        return;
    }

    method int nextPiece()
    {
        let last_piece = last_piece + seed;
        return last_piece & 7;
    }

    method void run() {
        var int turn;
        var char key;
        var boolean moved, repeat;
        var Piece piece;

        let piece = mesa.spawnPiece(nextPiece());
        let key = 0;
        do mesa.draw();

        // Official keymap
        // z: rotate left
        // c: hold
        // esc: pause
        // space: hard drop
        // left/right movement
        // up: rotate right
        // down: soft drop

        while (~(game_over)) {
            let turn = 0;
            while (turn < 10) {
                let moved = false;
                let repeat = false;
                if  (key = Keyboard.keyPressed()) {
                    let repeat = true;
                }
                let key = Keyboard.keyPressed();

                if (key = 130) { // left
                    let moved = mesa.move(piece, 3);
                }
                if (key = 132) { // right
                    let moved = mesa.move(piece, 4);
                }
                if ((key = 131) & (~repeat)) { // up
                    do mesa.rotateRight(piece);
                    let moved = true;
                }
                if (key = 133) { // down
                    let moved = mesa.move(piece, 2);
                }

                if (~(key = 0) & (moved)) {
                    do TetrisGame.seed(key);
                    do TetrisGame.seed(turn);
                    do mesa.draw();
                }
                let turn = turn + 1;
                do Sys.wait(80);
            }

            // auto drop
            if (~ mesa.move(piece, 2)) {
                // piece locked, spawn new
                do mesa.clearRows();
                do TetrisGame.seed(key * piece);
                let piece = mesa.spawnPiece(nextPiece());
                if (mesa.hasHiddenBlocks()) {
                    let game_over = true;
                }
            }

            do mesa.draw();
        }
        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }

    // criar uma peça modelo N
    // function Piece p1();
    // function Piece p2();

}
