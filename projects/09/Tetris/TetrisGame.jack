class TetrisGame
{
    field boolean game_over;
    // tabuleiro
    field Board board;
    field Board preview;
    field Piece current;
    field Piece next;
    field int last_piece;
    static int seed;

    constructor TetrisGame new()
    {
        let board = Board.new(18, 10);
        do board.setPos(180, 250);
        let preview = Board.new(6, 6);
        do preview.setPos(350, 80);
        let game_over = false;
        let last_piece = 1;
        // starting pieces
        do TetrisGame.seed(155);
        let current = board.spawnPiece(nextPiece());
        let next = preview.spawnPiece(nextPiece());
        do preview.move(next, 2);
        do board.draw();
        do preview.draw();
        return this;
    }

    function void seed(int s)
    {
        let seed = seed + s;
        return;
    }

    method int nextPiece()
    {
        let last_piece = last_piece + seed;
        return last_piece & 7;
    }

    // swap current for next
    method void swapPieces()
    {
        do preview.removePiece(next);
        let current = board.spawnPiece(last_piece & 7);
        // next random piece
        let next = preview.spawnPiece(nextPiece());
        do preview.move(next, 2);
        return;
    }

    method void hardDrop() {
        while (board.move(current, 2)) {
            // pass
        }
        return;
    }

    // esc: pause, 140
    method void pause() {
        var char key;
        var boolean paused;
        let paused = true;
        let key = 0;
        do Sys.wait(250);
        while (paused) {
            let key = Keyboard.keyPressed();
            if (key = 140) {
                let paused = false;
            }
            do Sys.wait(80);
        }
        return;
    }

    method void run() {
        var int turn;
        var char key;
        var boolean moved, repeat;

        while (~(game_over)) {
            let turn = 0;
            while (turn < 10) {
                let moved = false;
                let repeat = false;

                if  (key = Keyboard.keyPressed()) {
                    let repeat = true;
                }
                let key = Keyboard.keyPressed();

                if ((key = 140) & (~repeat)) { // esc
                    do pause();
                }
                if (key = 130) { // left
                    let moved = board.move(current, 3);
                }
                if (key = 132) { // right
                    let moved = board.move(current, 4);
                }
                if ((key = 131) & (~repeat)) { // up
                    do board.rotateRight(current);
                    let moved = true;
                }
                if (key = 133) { // down
                    let moved = board.move(current, 2);
                }
                if ((key = 90) & (~repeat)) { // z
                    do board.rotateLeft(current);
                    let moved = true;
                }
                if ((key = 32) & (~repeat)) { // space
                    let turn = 10;
                    do hardDrop();
                }

                if (~(key = 0) & (moved)) {
                    do TetrisGame.seed(key);
                    do TetrisGame.seed(turn);
                    do board.draw();
                }
                let turn = turn + 1;
                do Sys.wait(80);
            }

            // auto drop
            if (~ board.move(current, 2)) {
                // piece locked
                do board.clearRows();
                do TetrisGame.seed(key);
                do TetrisGame.seed(current);
                do swapPieces();

                if (board.hasHiddenBlocks()) {
                    let game_over = true;
                }
            }

            do preview.draw();
            do board.draw();
        }

        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }

}
