class Board
{
    // matrix do tabuleiro
    field Array b;
    // tamanho
    field int rows, cols;
    // peça atual
    field Piece current;

    constructor Board new(int mrows, int mcols)
    {
        var int n;
        var Array col;
        // enter the matrix
        let n = 0;
        let b = Array.new(mrows);
        while (n < mrows) {
            let col = Array.new(mcols);
            let b[n] = col;
            let n = n + 1;
        }
        let rows = mrows;
        let cols = mcols;
        return this;
    }

    // get cel
    method int getCel(int i, int j)
    {
        var Array row;
        var int val;
        //if (i < 0 || i > rows) {
        //    do Sys.error();
        //}
        let row = b[i];
        let val = row[j];
        return val;
    }

    // set cel
    method void setCel(int i, int j, int val)
    {
        var Array row;
        var int val;
        let row = b[i];
        let row[j] = val;
        return;
    }

    // adicionar uma peça no topo do tabuleiro
    method void addPiece(Piece piece)
    {
        var Block b;
        do piece.rewind();
        while (piece.valid()) {
            let b = piece.current();
            do setCel(b.getRow(), b.getCol(), b);
            do piece.next();
        }
        // store piece
        let current = piece;
        return;
    }

    method void removePiece(Piece piece)
    {
        var Block b;
        do piece.rewind();
        while (piece.valid()) {
            let b = piece.current();
            do setCel(b.getRow(), b.getCol(), 0);
            do piece.next();
        }
        return;
    }

    method boolean detectCollision(Piece piece)
    {
        var Block b;
        var int cel;
        var int row, col;

        do piece.rewind();
        while (piece.valid()) {
            let b = piece.current();

            let row = b.getRow();
            let col = b.getCol();

            // validar indices
            if (col < 0 | col > (cols - 1)) {
                return true;
            }
            if (row < 0 | row > (rows - 1)) {
                return true;
            }

            let cel = getCel(b.getRow(), b.getCol());

            if (~(cel = 0)) {
                return true;
            }
            do piece.next();
        }

        return false;
    }

    method void move(Piece piece, int dir)
    {
        var Piece copy;
        let copy = piece.copy();
        do copy.move(dir);
        do moveTo(piece, copy);
        do copy.dispose();
        return;
    }

    method void rotateLeft(Piece piece)
    {
        do rotate(piece, 3);
        return;
    }

    method void rotateRight(Piece piece)
    {
        do rotate(piece, 4);
        return;
    }

    method void rotate(Piece piece, int dir)
    {
        var Piece copy;
        let copy = piece.copy();
        do copy.rotate(dir);
        do moveTo(piece, copy);
        do copy.dispose();
        return;
    }

    method void moveTo(Piece piece, Piece copy)
    {
        do removePiece(piece);

        if (detectCollision(copy)) {
            do addPiece(piece);
            return;
        }

        do piece.updateBlocks(copy);
        do addPiece(piece);
        return;
    }

    /** {{{ Output */
    method void print()
    {
        var int i, j, val;

        do Output.printString("Board ");
        do Output.printInt(rows);
        do Output.printString("x");
        do Output.printInt(cols);
        do Output.println();

        let i = rows - 1;
        while (i > 0 | (i = 0)) {
            let j = 0;
            while (j < cols) {
                let val = b[i];
                let val = val[j];
                do Output.printInt(val);
                do Output.printString(" ");
                let j = j + 1;
            }
            do Output.println();
            let i = i - 1;
        }
        return;
    }

    method void draw()
    {
        var int i, j, val;
        var Block block, blank;

        let i = 0;
        while (i < rows) {
            let j = 0;
            while (j < cols) {
                let val = b[i];
                let val = val[j];

                if (val > 0) {
                    let block = val;
                    // output
                    do block.draw(rows, cols);
                } else {
                    let blank = Block.new(10);
                    do blank.setBoardPos(i, j);
                    do blank.drawBlank(rows, cols);
                    //do setCel(i, j, blank);
                    do Memory.deAlloc(blank);
                }

                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
    /** }}} */
}
