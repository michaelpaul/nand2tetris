class Board
{
    // matriz do tabuleiro
    field Array b;
    // tamanho da matriz
    field int rows, cols, visible_rows;
    // posição do ponto origem no canto inferior esquerdo
    field int bx, by;
    // board width/height
    field int bw, bh;
    // peça atual
    field Piece current;

    constructor Board new(int max_rows, int max_cols)
    {
        var int n;

        let rows = max_rows;
        let cols = max_cols;
        let visible_rows = rows - 2;
        let bw = cols * Block.getSize() + Block.getMargin();
        let bh = visible_rows * Block.getSize() + Block.getMargin();

        // enter the matrix
        let n = 0;
        let b = Array.new(rows);
        while (n < rows) {
            let b[n] = Array.new(cols);
            let n = n + 1;
        }

        return this;
    }

    method void setPos(int x, int y)
    {
        let bx = x;
        let by = y;
        return;
    }
    method int getCel(int i, int j)
    {
        var Array row;
        var int val;
        //if (i < 0 || i > rows) {
        //    do Sys.error();
        //}
        let row = b[i];
        let val = row[j];
        return val;
    }

    method void setCel(int i, int j, int val)
    {
        var Array row;
        // var int val;
        let row = b[i];
        let row[j] = val;
        return;
    }

    method Piece spawnPiece(int code) {
        var Piece piece;
        let piece = Piece.new(rows, cols);
        if (code = 0) {
            do piece.cyanI();
        }
        if (code = 1) {
            do piece.blueJ();
        }
        if (code = 2) {
            do piece.orangeL();
        }
        if (code = 3) {
            do piece.square();
        }
        if (code = 4) {
            do piece.greenS();
        }
        if ((code = 5) | (code = 7)) {
            do piece.purpleT();
        }
        if (code = 6) {
            do piece.redZ();
        }
        do addPiece(piece);
        do move(piece, 2);
        do move(piece, 2);
        return piece;
    }

    // adicionar uma peça no topo do tabuleiro
    method void addPiece(Piece piece)
    {
        var Block bloco;
        do piece.rewind();
        while (piece.valid()) {
            let bloco = piece.current();
            do setCel(bloco.getRow(), bloco.getCol(), bloco);
            do piece.next();
        }
        // store piece
        let current = piece;
        return;
    }

    method void removePiece(Piece piece)
    {
        var Block bloco;
        do piece.rewind();
        while (piece.valid()) {
            let bloco = piece.current();
            do setCel(bloco.getRow(), bloco.getCol(), 0);
            do piece.next();
        }
        return;
    }

    method boolean detectCollision(Piece piece)
    {
        var Block bloco;
        var int cel;
        var int row, col;

        do piece.rewind();
        while (piece.valid()) {
            let bloco = piece.current();

            let row = bloco.getRow();
            let col = bloco.getCol();

            // left/right walls
            if (col < 0 | (col > (cols - 1))) {
                return true;
            }
            // bottom/top walls
            if (row < 0 | (row > (rows - 1))) {
                return true;
            }

            let cel = getCel(bloco.getRow(), bloco.getCol());

            if (~(cel = 0)) {
                return true;
            }
            do piece.next();
        }

        return false;
    }

    method boolean move(Piece piece, int dir)
    {
        var Piece copy;
        var boolean moved;
        let copy = piece.copy(rows, cols);
        do copy.move(dir);
        let moved = moveTo(piece, copy);
        do copy.dispose();
        return moved;
    }

    method void rotateLeft(Piece piece)
    {
        do rotate(piece, 3);
        return;
    }

    method void rotateRight(Piece piece)
    {
        do rotate(piece, 4);
        return;
    }

    method void rotate(Piece piece, int dir)
    {
        var Piece copy;
        // quadrado não tem rotação
        if (~piece.canRotate()) {
            return;
        }
        let copy = piece.copy(rows, cols);
        do copy.rotate(dir);
        do moveTo(piece, copy);
        do copy.dispose();
        return;
    }

    method boolean moveTo(Piece piece, Piece copy)
    {
        do removePiece(piece);

        if (detectCollision(copy)) {
            do addPiece(piece);
            return false;
        }

        do piece.updateBlocks(copy);
        do addPiece(piece);
        return true;
    }

    method int clearRows()
    {
        var int i, j, line, points;
        var Block block;
        let i = 0;
        let points = 0;
        while (i < visible_rows) {
            let line = 0;
            let j = 0;
            while (j < cols) {
                if (getCel(i, j) > 0) {
                    let line = line + 1;
                }
                let j = j + 1;
            }
            // empty row
            if (line = j) {
                let j = 0;
                let points = points + 1;
                while (j < cols) {
                    let block = getCel(i, j);
                    do block.dispose();
                    do setCel(i, j, 0);
                    let j = j + 1;
                }
                // descer todos os blocos acima dessa linha
                do moveBlocksDown(i);
                let i = i - 1;
            }
            let i = i + 1;
        }

        return points;
    }

    method void moveBlocksDown(int start_row)
    {
        var int i, j, val;
        var Block block;
        let i = start_row;
        while (i < visible_rows) {
            let j = 0;
            while (j < cols) {
                let val = getCel(i, j);
                if (val > 0) {
                    let block = val;
                    do setCel(block.getRow(), block.getCol(), 0);
                    do block.move(2);
                    do setCel(block.getRow(), block.getCol(), block);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }

    method boolean hasHiddenBlocks()
    {
        var int i, j;
        let i = visible_rows;
        while (i < rows) {
            let j = 0;
            while (j < cols) {
                if (getCel(i, j) > 0) {
                    return true;
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return false;
    }

    /** {{{ Output */
    method void print()
    {
        var int i, j, val;

        do Output.printString("Board ");
        do Output.printInt(rows);
        do Output.printString("x");
        do Output.printInt(cols);
        do Output.println();

        let i = rows - 1;
        while (i > 0 | (i = 0)) {
            let j = 0;
            while (j < cols) {
                let val = b[i];
                let val = val[j];
                do Output.printInt(val);
                do Output.printString(" ");
                let j = j + 1;
            }
            do Output.println();
            let i = i - 1;
        }
        return;
    }

    method void drawBackground()
    {
        // black
        do Screen.setColor(true);
        do Screen.drawRectangle(bx, by - bh, bx + bw, by);
        return;
    }

    method void erase()
    {
        // white
        do Screen.setColor(false);
        do Screen.drawRectangle(bx + 1, by - bh + 1, bx + bw - 1, by - 1);
        // restore color to black
        do Screen.setColor(true);
        return;
    }

    method void draw()
    {
        var int i, j, val;
        var Block block;

        do erase();

        // Draw visible blocks
        let i = 0;
        while (i < visible_rows) {
            let j = 0;
            while (j < cols) {
                let val = getCel(i, j);
                if (val > 0) {
                    let block = val;
                    do block.draw(bx, by);
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        return;
    }
    /** }}} */
}
