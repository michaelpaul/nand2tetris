class Piece
{
    // partes dessa peça
    field Array blocks;
    field int size;
    field int index;
    field boolean canRotate;
    // posições ocultas no topo da mesa para construção de peças
    field int l1, l2, middle;

    constructor Piece new(int board_rows, int board_cols)
    {
        let blocks = Array.new(4); // max 4 blocos
        let size = 0;
        let canRotate = true;
        do rewind();

        let l1 = board_rows - 1;
        let l2 = board_rows - 2;
        let middle = (board_cols / 2) - 1;

        return this;
    }

    // adicionar bloco a esta peça
    method void addBlock(Block s)
    {
        let blocks[size] = s;
        let size = size + 1;
        return;
    }

    method Block add(int row, int col)
    {
        var Block b;
        let b = Block.new();
        do b.setBoardPos(row, col);
        do addBlock(b);
        return b;
    }

    method Block addOrigin(int row, int col)
    {
        var Block origin;
        let origin = add(row, col);
        do origin.setOrigin();
        return origin;
    }

    method Block getBlock(int index)
    {
        return blocks[index];
    }

    method Piece copy(int board_rows, int board_cols)
    {
        var Piece copy;
        var Block source_block, dest_block;
        let copy = Piece.new(board_rows, board_cols);
        do rewind();
        while (valid()) {
            let source_block = current();
            let dest_block = Block.new();
            do dest_block.setBoardPos(source_block.getRow(), source_block.getCol());
            do copy.addBlock(dest_block);
            do next();
        }
        let dest_block = copy.getBlock(0);
        do dest_block.setOrigin();
        return copy;
    }

    method void move(int direction)
    {
        var Block block;
        var int row, col;

        do rewind();
        while (valid()) {
            let block = current();
            let row = block.getRowDir(direction);
            let col = block.getColDir(direction);
            do block.setBoardPos(row, col);
            do next();
        }

        return;
    }

    method boolean canRotate() {
        return canRotate;
    }

    method void disableRotation() {
        let canRotate = false;
        return;
    }

    method void rotate(int dir)
    {
        var int xorigin, yorigin;
        var Block origin;

        let origin = getBlock(0);
        let xorigin = origin.getRow();
        let yorigin = origin.getCol();

        do rewind();
        while (valid()) {
            do rotateBlock(current(), dir, xorigin, yorigin);
            do next();
        }

        return;
    }

    /**
    http://tetris.wikia.com/wiki/SRS - recomendado
    http://tetris.wikia.com/wiki/Nintendo_Rotation_System - primeira versão, mais simples

    http://www.euclideanspace.com/maths/geometry/affine/aroundPoint/matrix2d/
    http://www.idomaths.com/linear_transformation.php
    */
    method void rotateBlock(Block block, int dir, int xorigin, int yorigin)
    {
        var int xin, yin, xout, yout;
        // Rotation matrix positions
        var int r00, r01, r10, r11;
        // +-----+
        // |00|01|
        // +-----+
        // |10|11|
        // +-----+
        let r00 = 0;
        let r11 = 0;
        // left
        if (dir = 3) {
            let r01 = 1;
            let r10 = -1;
        }
        // right
        if (dir = 4) {
            let r01 = -1;
            let r10 = 1;
        }

        let xin = block.getRow();
        let yin = block.getCol();

        // xout = r00* xin + r01* yin + x - r00*x - r01*y
        let xout = (r00 * xin) + (r01 * yin) +
            (xorigin - (r00 * xorigin) - (r01 * yorigin));

        // yout = r10* xin + r11* yin + y - r10*x - r11*y
        let yout = (r10 * xin) + (r11 * yin) +
            (yorigin - (r10 * xorigin) - (r11 * yorigin));

        do block.setBoardPos(xout, yout);
        return;
    }

    method void updateBlocks(Piece source)
    {
        var Block source_block, dest_block;
        do source.rewind();
        while (source.valid()) {
            let source_block = source.current();
            let dest_block = getBlock(source.key());
            do dest_block.setBoardPos(source_block.getRow(), source_block.getCol());
            do source.next();
        }
        return;
    }

    /** {{{ Iterator interface */
    method void rewind()
    {
        let index = 0;
        return;
    }

    method boolean valid()
    {
        return index < size;
    }

    method void next()
    {
        let index = index + 1;
        return;
    }

    method int key()
    {
        return index;
    }

    method Block current()
    {
        return blocks[index];
    }
    /** }}} */

    /** {{{ Piece builder/transformer */
    /**
    Board Map from origin
    +-----------+
    |2,0|2,1|2,2|
    +-----------+
    |1,0|1,1|1,2|
    +-----------+
    |0,0|0,1|0,2|
    +-----------+
    */
    method void blueJ()
    {
        do addOrigin(l1, middle);
        do add(l1, middle - 1);
        do add(l1, middle + 1);
        do add(l2, middle + 1);
        return;
    }
    /** }}} */

    method void dispose()
    {
        var Block b;
        do rewind();
        while (valid()) {
            let b = current();
            do b.dispose();
            do next();
        }
        do blocks.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
