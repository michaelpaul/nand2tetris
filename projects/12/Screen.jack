/**
 * Graphic screen library.
 * Hack screen: 512x256
 */
class Screen {
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let color = true;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int pow, i, addr, bitPos, val;

        if ((x < 0) | (x > 511)) {
            // Illegal pixel coordinates
            do Sys.error(7);
        }
        if ((y < 0) | (y > 255)) {
            // Illegal pixel coordinates
            do Sys.error(7);
        }

        let addr = 16384 + (y * 32) + (x / 16);
        let bitPos = x - (16 * (x / 16)); // c % 16
        let val = Memory.peek(addr);

        // build mask
        // @TODO criar um array com essas potencias?
        let i = 0;
        let pow = 1;
        while (i < bitPos) {
            let pow = pow * 2;
            let i = i + 1;
        }

        // https://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c
        if (color) {
            // black: set bit
            // number |= 1 << x;
            let val = val | pow;
        } else {
            // white: clear bit
            // number &= ~(1 << x);
            let val = val & (~pow);
        }
        do Memory.poke(addr, val);
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        // @TODO error
        // if (1) {
        //     // Illegal line coordinates
        //     do Sys.error(8);
        // }
        // @TODO code
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a, b;
        // @TODO error
        // if (1) {
        //     // Illegal rectangle coordinates
        //     do Sys.error(9);
        // }
        // @TODO code
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        // @TODO code
        return;
    }
}
